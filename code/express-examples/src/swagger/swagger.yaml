openapi: "3.0.0"
info:
  version: 1.0.0
  title: EC Api
  description: |
    An API that implements [jsonplaceholder](https://jsonplaceholder.typicode.com/) post and users endpoints, backed by a mongo database. 
    
    The purpose for this API is educational and meant as a step between using jsonplaceholder in a UI and implementing your own API.
     
    The following limitations appply:
    - Sequential id is not considered good practice and is only implemented to provide a sequence of id:s. No guarantee is given that id's are unique in any way. Students should start using  uuids as part of the course and rely on `_id` instead
  license:
    name: MIT
servers:
- url: http://api.softhouse.rocks
- url: http://localhost:3000
paths:
  /posts:
    get:
      summary: List posts
      operationId: listPosts
      tags:
      - posts
      parameters:
      - name: userId
        in: query
        description: filter by user id
        required: false
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Array of posts
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponsePosts"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a Post
      operationId: createPost
      tags:
      - posts
      requestBody:
        description: the post to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: The created post
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponsePost"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{postId}:
    get:
      summary: Get a Post
      operationId: getPost
      tags:
        - posts
      parameters:
      - name: postId
        in: path
        description: post id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: The found post
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponsePost"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Replace a Post
      operationId: putPost
      tags:
      - posts
      parameters:
      - name: postId
        in: path
        description: post id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: the post to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: The replaced post
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponsePost"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      summary: Update a Post
      operationId: patchPost
      tags:
        - posts
      parameters:
      - name: postId
        in: path
        description: post id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: the post to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: The updated post
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponsePost"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a Post
      operationId: deletePost
      tags:
        - posts
      parameters:
      - name: postId
        in: path
        description: post id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: The deleted post
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponsePost"
        '204':
          description: No change (nothing was deleted)
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      summary: List users
      operationId: listUsers
      tags:
        - users
      responses:
        '200':
          description: Array of users
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponseUsers"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a User
      operationId: createUser
      tags:
      - users
      requestBody:
        description: the user to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: The created user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponseUser"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    get:
      summary: get a user
      operationId: getUser
      tags:
      - users
      parameters:
      - name: userId
        in: path
        description: user by id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: the user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponseUser"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Replace a User
      operationId: putUser
      tags:
      - users
      parameters:
      - name: userId
        in: path
        description: user id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        description: the post to replace
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The replaced user
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/ResponseUser"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Post:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        userId:
          type: integer    
    ResponsePost:
      allOf:
      - $ref: "#/components/schemas/Post"
      - properties:
          id:
            type: integer
          _id:
            type: string
            format: uuid
    ResponsePosts:
      type: array
      items:
        $ref: "#/components/schemas/ResponsePost"
    User:
      properties:
        name:
          type: string
        username:
          type: string
        email:
          type: string
        address:
          properties:
            street:
              type: string
            suite:
              type: string
            city:
              type: string
            zipcode:
              type: string
            geo:
              properties:
                lat:
                  type: integer
                lng:
                  type: integer
    ResponseUser:
      allOf:
      - $ref: "#/components/schemas/User"
      - properties:
          id:
            type: integer
          _id:
            type: string
            format: uuid
    ResponseUsers:
      type: array
      items:
        $ref: "#/components/schemas/ResponseUser"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
